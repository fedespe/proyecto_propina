USE MASTER;

--DROP DATABASE PROPINA;
--GO
CREATE DATABASE PROPINA;
GO

USE PROPINA;
--GO

--DROP TABLE dbo.CARGO;
--DROP TABLE dbo.USUARIO;
--DROP TABLE dbo.EMPLEADO;
--DROP TABLE dbo.ADMINISTRADOR;
--DROP TABLE dbo.VISITANTE;
--DROP TABLE dbo.REPARTO;
--DROP TABLE dbo.RESPARTO_EMPLEADO;
--DROP TABLE dbo.DATOS;
--DROP TABLE dbo.MOVIMIENTOS;

CREATE TABLE dbo.CARGO
(
	Id	INT  NOT NULL IDENTITY(1,1),
	Nombre NVARCHAR(30) NOT NULL,
	Puntaje NUMERIC(4,1) NOT NULL,
	Tipo NVARCHAR(20) NOT NULL,
	Area NVARCHAR(20) NOT NULL, 	

	CONSTRAINT PK_CARGO PRIMARY KEY(Id),
	CONSTRAINT CK_COL_Tipo_InValores_TAB_CARGO CHECK (Tipo in('PORCENTAJE_MAYOR', 'PORCENTAJE_MENOR')),
	CONSTRAINT CK_COL_Area_InValores_TAB_CARGO CHECK (Area in('MESAS', 'CAJAS','OTROS'))
);
GO

CREATE TABLE dbo.USUARIO
(
	Id	INT  NOT NULL IDENTITY(1,1),	
	Nombre NVARCHAR(30) NOT NULL,
	Apellido NVARCHAR(30) NOT NULL,
	NombreUsuario NVARCHAR(50) NOT NULL,
	Contrasenia NVARCHAR(MAX) NOT NULL,
	--UltimaModificacionContrasenia DATETIME NOT NULL,
	Habilitado BIT NOT NULL,
	Documento NVARCHAR(30),	
	Telefono NVARCHAR(20) NOT NULL,
	CorreoElectronico NVARCHAR(50) NOT NULL,
	--Direccion NVARCHAR (100) NOT NULL,
	--FechaAlta DATETIME NOT NULL,
	Tipo NVARCHAR(20) NOT NULL,
	--Imagen NVARCHAR(300) NOT NULL,

	CONSTRAINT PK_USUARIO PRIMARY KEY(Id),
	CONSTRAINT UK_NombreUsuario_USUARIO UNIQUE(NombreUsuario),
	CONSTRAINT UK_CorreoElectronico_USUARIO UNIQUE(CorreoElectronico),
	--CONSTRAINT CK_COL_FechaAlta_MenorIgual_Hoy_TAB_USUARIO CHECK (FechaAlta <= GetDate()),  --Ver: Ojo con la hora!!! SOLUCIONADO LA HORA
	CONSTRAINT CK_COL_Tipo_InValores_TAB_USUARIO CHECK (Tipo in('EMPLEADO', 'ADMINISTRADOR', 'VISITANTE'))
);
GO

CREATE TABLE dbo.EMPLEADO
(
	UsuarioId INT  NOT NULL,
	NumeroEmpleado INT,
	Ausencias NUMERIC(4,1) NOT NULL,
	AusenciasAsamblea NUMERIC(4,1) NOT NULL,
	CargoId INT NOT NULL,	

	CONSTRAINT PK_EMPLEADO PRIMARY KEY(UsuarioId),
	CONSTRAINT FK_UsuarioId_EMPLEADO FOREIGN KEY (UsuarioId) REFERENCES dbo.USUARIO (Id),
	CONSTRAINT FK_CargoId_EMPLEADO FOREIGN KEY (CargoId) REFERENCES dbo.CARGO (Id)
);
GO

CREATE TABLE dbo.ADMINISTRADOR
(
	UsuarioId INT  NOT NULL,

	CONSTRAINT PK_ADMINISTRADOR PRIMARY KEY(UsuarioId),
	CONSTRAINT FK_UsuarioId_ADMINISTRADOR FOREIGN KEY (UsuarioId) REFERENCES dbo.USUARIO (Id)
);
GO

CREATE TABLE dbo.VISITANTE
(
	UsuarioId INT  NOT NULL,

	CONSTRAINT PK_VISITANTE PRIMARY KEY(UsuarioId),
	CONSTRAINT FK_UsuarioId_VISITANTE FOREIGN KEY (UsuarioId) REFERENCES dbo.USUARIO (Id)
);
GO

CREATE TABLE dbo.REPARTO
(
	Id	INT  NOT NULL IDENTITY(1,1),
	FechaReparto DATETIME NOT NULL,
	--FechaRealizado DATETIME NOT NULL,
	AdministradorId INT NOT NULL,
	MontoPesos NUMERIC(12,2) NOT NULL,
	MontoDolares NUMERIC(12,2) NOT NULL,
	Eliminado BIT NOT NULL,
	

	CONSTRAINT PK_REPARTO PRIMARY KEY(Id),
	CONSTRAINT FK_AdministradorId_REPARTO FOREIGN KEY (AdministradorId) REFERENCES dbo.ADMINISTRADOR (UsuarioId)
);
GO

CREATE TABLE dbo.REPARTO_EMPLEADO 
(
	Id	INT  NOT NULL IDENTITY(1,1),
	EmpleadoId INT NOT NULL,
	RepartoId	INT  NOT NULL,
	Ausencias NUMERIC(4,1) NOT NULL,
	AusenciasAsamblea NUMERIC(4,1) NOT NULL,
	MontoPesos NUMERIC(8,2) NOT NULL,
	MontoDolares NUMERIC(8,2) NOT NULL,	
	DescuentoPesos NUMERIC(8,2) NOT NULL,
	DescuentoDolares NUMERIC(8,2) NOT NULL,
	MontoDiferenciaCargoPesos NUMERIC(8,2) NOT NULL,--PAGO POR TRABAJO EN OTRO CARGO
	MontoDiferenciaCargoDolares NUMERIC(8,2) NOT NULL,--PAGO POR TRABAJO EN OTRO CARGO
	BonoPesos NUMERIC(8,2) NOT NULL,
	BonoDolares NUMERIC(8,2) NOT NULL,
	PagoExtraPesos NUMERIC(8,2) NOT NULL,--PAGO COMISION U OTROS
	PagoExtraDolares NUMERIC(8,2) NOT NULL,--PAGO COMISION U OTROS

	CONSTRAINT PK_REPARTO_EMPLEADO PRIMARY KEY(Id),
	CONSTRAINT FK_EmpleadoId_REPARTO_EMPLEADO FOREIGN KEY (EmpleadoId) REFERENCES dbo.EMPLEADO (UsuarioId),
	CONSTRAINT FK_RepartoId_REPARTO_EMPLEADO FOREIGN KEY (RepartoId) REFERENCES dbo.REPARTO (Id)
);
GO

CREATE TABLE dbo.DATOS
(
	Id	INT  NOT NULL IDENTITY(1,1),
	--FechaUltipoCambio DATETIME NOT NULL,
	AdministradorId INT,
	UltimoRepartoId INT,	
	MontoFondoPesos NUMERIC(12,2) NOT NULL,
	MontoFondoDolares NUMERIC(12,2) NOT NULL,
	SalarioIntegranteComisionPesos NUMERIC(12,2) NOT NULL,
	SalarioIntegranteComisionDolares NUMERIC(12,2) NOT NULL,
	porcentajeMayor NUMERIC(4,1) NOT NULL,
	porcentajeMenor NUMERIC(4,1) NOT NULL,
	porcentajeFondo NUMERIC(4,1) NOT NULL,
	

	CONSTRAINT PK_DATOS PRIMARY KEY(Id),
	CONSTRAINT FK_UltimoRepartoId_DATOS FOREIGN KEY (UltimoRepartoId) REFERENCES dbo.REPARTO (Id),
	CONSTRAINT FK_AdministradorId_DATOS FOREIGN KEY (AdministradorId) REFERENCES dbo.ADMINISTRADOR (UsuarioId)
);
GO

INSERT INTO dbo.DATOS VALUES
(NULL, NULL, 0, 0, 5000, 0, 88, 12, 2);

CREATE TABLE dbo.MOVIMIENTOS
(
	Id	INT  NOT NULL IDENTITY(1,1),
	Fecha DATETIME NOT NULL,
	AdministradorAnteriorId INT,
	AdministradorNuevoId INT,
	TipoRegistro NVARCHAR(20) NOT NULL,	--reparto o datos
	TipoMovimiento NVARCHAR(20) NOT NULL, --delete, update, insert
	RepartoId INT,
	DatosId INT,

	CONSTRAINT PK_MOVIMIENTOS PRIMARY KEY(Id),
	CONSTRAINT FK_AdministradorAnteriorId_MOVIMIENTOS FOREIGN KEY (AdministradorAnteriorId) REFERENCES dbo.ADMINISTRADOR (UsuarioId),
	CONSTRAINT FK_AdministradorNuevoId_MOVIMIENTOS FOREIGN KEY (AdministradorNuevoId) REFERENCES dbo.ADMINISTRADOR (UsuarioId),
	CONSTRAINT CK_COL_TipoRegistro_InValores_TAB_MOVIMIENTOS CHECK (TipoRegistro in('REPARTO', 'DATOS')),
	CONSTRAINT CK_COL_TipoMovimiento_InValores_TAB_MOVIMIENTOS CHECK (TipoMovimiento in('DELETE', 'UPDATE', 'INSERT')),
	CONSTRAINT FK_RepartoId_MOVIMIENTOS FOREIGN KEY (RepartoId) REFERENCES dbo.REPARTO (Id),
	CONSTRAINT FK_DatosId_MOVIMIENTOS FOREIGN KEY (DatosId) REFERENCES dbo.DATOS (Id)
);
GO

--*************************************
--				TRIGGERS
--*************************************

CREATE TRIGGER dbo.REPARTO_TRIGGER 
ON dbo.REPARTO
AFTER INSERT, UPDATE --,DELETE
AS
BEGIN
	DECLARE @idAdminAnterior int;
	DECLARE @idAdminNuevo int;
	DECLARE @idReparto int;
	
	IF EXISTS(SELECT * FROM inserted)
	 BEGIN 
	  SELECT @idAdminNuevo=i.AdministradorId, @idReparto=i.Id FROM inserted i;
	  IF EXISTS(SELECT * FROM deleted)
		BEGIN --Si es un update
			SELECT @idAdminAnterior=d.AdministradorId FROM deleted d;
			INSERT INTO dbo.MOVIMIENTOS VALUES(GETDATE(), @idAdminAnterior, @idAdminNuevo, 'REPARTO', 'UPDATE', @idReparto, NULL);
		END
	  ELSE
		BEGIN --Si es un insert                            
			INSERT INTO dbo.MOVIMIENTOS VALUES(GETDATE(), NULL, @idAdminNuevo, 'REPARTO', 'INSERT', @idReparto, NULL);
		END
	 END
	--ELSE     
	-- BEGIN --si es un delete    
	--	SELECT @idAdminAnterior=d.AdministradorId FROM deleted d;                     
	--	INSERT INTO dbo.MOVIMIENTOS VALUES(GETDATE(), NULL, @idAdminNuevo, 'REPARTO', 'INSERT', @idReparto, NULL);
	-- END
END;
GO

CREATE TRIGGER dbo.DATOS_TRIGGER 
ON dbo.DATOS
AFTER UPDATE 
AS
BEGIN
	DECLARE @idAdminAnterior int;
	DECLARE @idAdminNuevo int;
	DECLARE @idDatos int;
	
	IF EXISTS(SELECT * FROM inserted)
	 BEGIN 
	  IF EXISTS(SELECT * FROM deleted)
		BEGIN --Si es un update
			SELECT @idAdminNuevo=i.AdministradorId, @idDatos=i.Id FROM inserted i;
			SELECT @idAdminAnterior=d.AdministradorId FROM deleted d;
			INSERT INTO dbo.MOVIMIENTOS VALUES(GETDATE(), @idAdminAnterior, @idAdminNuevo, 'DATOS', 'UPDATE', NULL, @idDatos);
		END	  
	 END
END;
GO

--*************************************
--				DATOS
--*************************************

INSERT INTO dbo.USUARIO VALUES
('FEDERICO', 'SPERONI', 'FSPE', '123456789', 1, '42614099', '099845498', 'fsperonip@hotmail.com', 'ADMINISTRADOR');
INSERT INTO dbo.ADMINISTRADOR VALUES
(1);

--*************************************
--				SELECTS
--*************************************

SELECT * FROM dbo.CARGO;
SELECT * FROM dbo.USUARIO;
SELECT * FROM dbo.EMPLEADO;
SELECT * FROM dbo.ADMINISTRADOR;
SELECT * FROM dbo.VISITANTE;
SELECT * FROM dbo.REPARTO;
SELECT * FROM dbo.REPARTO_EMPLEADO;
SELECT * FROM dbo.DATOS;
SELECT * FROM dbo.MOVIMIENTOS;



